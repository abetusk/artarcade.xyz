#!/usr/bin/python3

# To the extent possible under law, the person who associated CC0 with
# this project has waived all copyright and related or neighboring rights
# to this project.
# 
# You should have received a copy of the CC0 legalcode along with this
# work.  If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
#

import sys, os, time
import requests
import json
import re
import datetime as dt
from datetime import datetime
import mysql.connector

SLEEPY=5
WATCHDOG_FN  = os.environ.get('HOME') + "/data/user.wd"
DB_CONFIG_FN = os.environ.get('HOME') + "/config/db.json"

DB_INFO = {}

with open(DB_CONFIG_FN) as fp:
  DB_INFO = json.loads(fp.read())

def log_line(msg):
  d = datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S")
  print( d  + " users_d:", msg)

def update_watchdog(fn = WATCHDOG_FN):
  with open(fn, "w") as fp:
    d = datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S")
    fp.write(str(d) + " hello\n")

st = 0
en = ''

if len(sys.argv) > 1:

  if sys.argv[1] == 'help':
    print("\n  users [start_idx] [end_date]\n")
    sys.exit(0)

  st = int(sys.argv[1])

  if len(sys.argv) > 2:
    en = sys.argv[2]

url='https://api.fxhash.xyz/graphql'
headers = {'content-type':'application/json', 'Accept-Charset':'UTF-8'}

data_template="""
{ "query": "query
  Q($sort: UserSortInput, $skip: Int, $take: Int) {
  users(sort: $sort, skip: $skip, take: $take) {
    id
    name
    createdAt
    avatarUri
  }
}","variables" : {
  "skip": <START>,
  "take": 50,
  "sort": { "createdAt": "DESC" }
}
}
"""

filt_tm  = datetime.now()
if en != '':
  filt_tm = datetime.strptime(en, "%Y-%m-%dT%H:%M:%S.%fZ")
filt_tm -= dt.timedelta(seconds=1)

USER_INSERT = "replace into users (user_id,data) values (%(user_id)s, %(data)s)"

active = True

stats = {
  "processed": 0
}

last_date_entry_str = 'init'
last_date_entry_tm = {}

while active:

  log_line("processed: " +  str(stats["processed"]))

  db_ctx = mysql.connector.connect(user     =DB_INFO["user"],
                                   password =DB_INFO["password"],
                                   host     ="localhost",
                                   database =DB_INFO["database"])
  db_cursor = db_ctx.cursor()

  st = 0
  end_reached = False
  while not end_reached:
    data = re.sub('\n', ' ', re.sub('<START>', str(st), data_template))

    r = requests.post(url, data=data, headers=headers)
    if not r.ok:
      log_line("ERROR: bad request" + str(r))
      break

    json_data = r.json();

    count = 0
    if ("data" in json_data) and ("users" in json_data["data"]):
      max_tm = datetime.now()
      max_str = 'init'
      for idx,a in enumerate(json_data["data"]["users"]):

        if "createdAt" in a:

          _tm = datetime.strptime(a["createdAt"], "%Y-%m-%dT%H:%M:%S.%fZ")
          if idx==0:
            max_str = a["createdAt"]
            max_tm = _tm

          if _tm > max_tm:
            max_str = a["createdAt"]
            max_tm = _tm

          if _tm > filt_tm:
            r = db_cursor.execute(USER_INSERT, {"user_id": a["id"], "data": json.dumps(a)})
            stats["processed"]+=1
            count+=1
          else:
            end_reached = True

      if last_date_entry_str == "init":
        last_date_entry_str = max_str
        last_date_entry_tm = max_tm

      if max_tm > last_date_entry_tm:
        last_date_entry_str = max_str
        last_date_entry_tm = max_tm
      if count==0: break
    else: break

    if count==0: break

    st += 50

  db_ctx.commit()
  db_cursor.close()
  db_ctx.close()

  time.sleep(SLEEPY)

  if last_date_entry_str != 'init':
    filt_tm = last_date_entry_tm
    filt_tm -= dt.timedelta(seconds=1)


#
#      for a in json_data["data"]["users"]:
#
#        if "createdAt" in a:
#          last_tm = datetime.strptime(a["createdAt"], "%Y-%m-%dT%H:%M:%S.%fZ")
#          last_en = a["createdAt"]
#
#        if last_tm > filt_tm:
#          r = db_cursor.execute(USER_INSERT, {"user_id": a["id"], "data": json.dumps(a)})
#          stats["processed"]+=1
#
#    if last_en != '...':
#      last_tm = datetime.strptime(last_en, "%Y-%m-%dT%H:%M:%S.%fZ")
#      if last_tm < filt_tm:
#        break
#
#    st += 50
#
#  db_ctx.commit()
#  db_cursor.close()
#  db_ctx.close()
#
#  time.sleep(SLEEPY)
#  filt_tm = last_tm
#  filt_tm -= dt.timedelta(seconds=1)
#
