#!/usr/bin/python3

# To the extent possible under law, the person who associated CC0 with
# this project has waived all copyright and related or neighboring rights
# to this project.
# 
# You should have received a copy of the CC0 legalcode along with this
# work.  If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
#

# gentk_d listens for new generativeTokens, ordered by their `mintOpensAt` entry.
# This insert/replaces the entry in the corresponding database as well as gets
# the list of reserves to update the database `reserves` table.
#

# A note about the 'processed' and time filtering entries.
# From observation, entries are most likely processed in 'batches'
# from the source (fxhash) as multiple entries can have the exact
# same time entry.
# To avoid missing data, I subtract 1 second from any time entry that
# I use.
# This means if there's no activity between the polling period of this
# process, the most recent entries will get reprocessed.
# This reprocess is fine as the insert/replace won't change anything
# but it will look like the 'processed' count will increase even though
# we're churning through the same trailing entries.
#

import sys, os, time
import requests
import json
import re
import datetime as dt
from datetime import datetime
import mysql.connector

SLEEPY=5
WATCHDOG_FN  = os.environ.get('HOME') + "/data/gentk.wd"
DB_CONFIG_FN = os.environ.get('HOME') + "/config/db.json"

DB_INFO = {}

with open(DB_CONFIG_FN) as fp:
  DB_INFO = json.loads(fp.read())

def log_line(msg):
  d = datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S")
  print( d  + " gentk_d:", msg)


def update_watchdog(fn = WATCHDOG_FN):
  with open(fn, "w") as fp:
    d = datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S")
    fp.write(str(d) + " hello\n")

st = 0
en = ''

if len(sys.argv) > 1:

  if sys.argv[1] == 'help':
    print("\n  gentk_d [start_idx] [end_date]\n")
    sys.exit(0)

  st = int(sys.argv[1])

  if len(sys.argv) > 2:
    en = sys.argv[2]

url='https://api.fxhash.xyz/graphql'
headers = {'content-type':'application/json', 'Accept-Charset':'UTF-8'}

data_template="""
{ "query": "query Q($sort: GenerativeSortInput, $skip: Int, $take: Int) {
  generativeTokens(sort: $sort, skip: $skip, take: $take) {
    id
    slug
    flag
    name
    metadata
    metadataUri
    generativeUri
    thumbnailUri
    displayUri
    tags
    labels
    originalSupply
    supply
    balance
    royalties
    mintOpensAt
    createdAt
    pricingFixed { price opensAt }
    pricingDutchAuction {
      levels
      restingPrice
      decrementDuration
      opensAt
      finalPrice
    }
    splitsPrimary {
      pct
      user { id name }
    }
    splitsSecondary {
      pct
      user { id name }
    }
    reserves {
      data
      amount
      method
    }
    moderationReason
    features
    author { id name }
    reports { id createdAt }
  }
}",
 "variables": {
   "skip":<START>,
   "take":50,
   "sort": { "mintOpensAt": "DESC" }
 }
}
"""

filt_tm  = datetime.now()
if en != '':
  filt_tm = datetime.strptime(en, "%Y-%m-%dT%H:%M:%S.%fZ")
filt_tm -= dt.timedelta(seconds=1)

GENTK_INSERT = "replace into gentk (gentk_id,data) values (%(gentk_id)s, %(data)s)"
RESERVE_INSERT = """
replace into
  reserve (user_id, gentk_id, method, quantity, ts)
  values (
    %(user_id)s,
    %(gentk_id)s,
    %(method)s,
    %(quantity)s,
    STR_TO_DATE( %(ts)s, "%Y-%m-%dT%H:%i:%S.%fZ" )
  )
"""

RESERVE_INSERT = """
begin
  if not exists (select seq_num from reserve where user_id = %(user_id)s and gentk_id = %(gentk_id)s and method = %(method)s )
  then
    insert into reserve (user_id, gentk_id, method, quantity, ts)
    values (
      %(user_id)s,
      %(gentk_id)s,
      %(method)s,
      %(quantity)s,
      STR_TO_DATE( %(ts)s, "%Y-%m-%dT%H:%i:%S.%fZ" )
    )
  end

end
"""



active = True

stats = { "processed": 0, "reserve": 0 }

last_date_entry_str = 'init'
last_date_entry_tm = {}

while active:

  log_line("processed: " +  str(stats["processed"]) + ", reserve: " + str(stats["reserve"]) )

  db_ctx = mysql.connector.connect(user     =DB_INFO["user"],
                                   password =DB_INFO["password"],
                                   host     ="localhost",
                                   database =DB_INFO["database"])
  db_cursor = db_ctx.cursor()

  reserve_list = []

  st = 0
  end_reached = False
  while not end_reached:

    data = re.sub('\n', ' ', re.sub('<START>', str(st), data_template))

    r = requests.post(url, data=data, headers=headers)
    if not r.ok:
      log_line("ERROR: bad request")
      break

    json_data = r.json();
    
    count = 0
    if ("data" in json_data) and ("generativeTokens" in json_data["data"]):
      max_tm = datetime.now()
      max_str = 'init'
      for idx,a in enumerate(json_data["data"]["generativeTokens"]):

        if "createdAt" in a:

          _tm = datetime.strptime(a["createdAt"], "%Y-%m-%dT%H:%M:%S.%fZ")
          if idx==0:
            max_str = a["createdAt"]
            max_tm = _tm

          if _tm > max_tm:
            max_str = a["createdAt"]
            max_tm = _tm

          if _tm > filt_tm:
            r = db_cursor.execute(GENTK_INSERT, {"gentk_id": a["id"], "data": json.dumps(a)})

            if ("reserves" in a):
              for reserve_entry in a["reserves"]:
                if "data" not in reserve_entry: continue
                for rcv_user_id in reserve_entry["data"]:
                  reserve_row = {
                    "gentk_id": str(a["id"]),
                    "user_id": rcv_user_id,
                    "quantity": reserve_entry["data"][rcv_user_id],
                    "method": reserve_entry["method"],
                    "ts": a["createdAt"]
                  }
                  reserve_list.append(reserve_row)

            stats["processed"]+=1
            count+=1
          else:
            end_reached = True

      if last_date_entry_str == "init":
        last_date_entry_str = max_str
        last_date_entry_tm = max_tm

      if max_tm > last_date_entry_tm:
        last_date_entry_str = max_str
        last_date_entry_tm = max_tm
      if count==0: break
    else: break

    if count==0: break

    st += 50

  for reserve_row in reserve_list:
    stats["reserve"] += 1
    r = db_cursor.execute(RESERVE_INSERT, reserve_row)

  db_ctx.commit()
  db_cursor.close()
  db_ctx.close()

  time.sleep(SLEEPY)

  if last_date_entry_str != 'init':
    filt_tm = last_date_entry_tm
    filt_tm -= dt.timedelta(seconds=1)

